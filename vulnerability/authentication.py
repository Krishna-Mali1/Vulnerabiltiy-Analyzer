import time
import tkinter as tk
from tkinter import ttk, scrolledtext
import requests
class AuthVulnerabilityChecker:
    def __init__(self, login_url, username, password, output_widget):
        self.login_url = login_url
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.output_widget = output_widget  # Pass the ScrolledText widget

    def log(self, message):
        """Insert messages into the UI output box instead of printing to the terminal."""
        if self.output_widget:
            self.output_widget.insert(tk.END, message + "\n")
            self.output_widget.see(tk.END)  # Auto-scroll to the latest message

    def check_auth_vulnerabilities(self):
        self.log("[+] Checking for authentication vulnerabilities...")

        try:
            response = self.session.post(self.login_url, data={"username": self.username, "password": self.password})
            
            if response.status_code == 200:
                self.log("[+] Login successful. Checking session security...")
                cookies = self.session.cookies.get_dict()
                
                if "Secure" not in str(cookies) or "HttpOnly" not in str(cookies):
                    self.log("[-] Session cookies are not secure!")
                else:
                    self.log("[+] Session cookies are secure.")
                
                self.check_brute_force_protection()
                self.check_2fa_bypass()
            else:
                self.log("[-] Failed to log in. Check credentials or authentication security measures.")
        
        except requests.RequestException as e:
            self.log(f"[-] Error during authentication check: {e}")

    def check_brute_force_protection(self):
        self.log("[+] Checking for brute-force protection...")
        failed_attempts = 0
        protection_triggered = False

        for attempt in range(1, 20):  # Testing up to 20 failed attempts
            response = self.session.post(self.login_url, data={"username": self.username, "password": "wrongpassword"})
            
            # Check if there is any significant change in response indicating protection (e.g., status code or message)
            if response.status_code == 200:
                failed_attempts += 1
                self.log(f"[+] Attempt {attempt}: Failed login, no protection triggered yet.")
            elif response.status_code == 403:  # This is often used for a blocked request
                protection_triggered = True
                self.log(f"[-] Brute-force protection triggered after {attempt} attempts.")
                break
            elif response.status_code != 200:
                self.log(f"[-] Attempt {attempt}: Unexpected response code {response.status_code}")
                break
            
            # If a delay is added after a certain number of failed attempts, you can check for that here as well
            if attempt > 3 and not protection_triggered:
                time.sleep(2)  # Simulate a delay introduced after several failed attempts
            
        if not protection_triggered:
            self.log(f"[+] Brute-force protection not triggered after {failed_attempts} failed attempts.")
        else:
            self.log("[+] Protection was triggered!")
    
    def check_2fa_bypass(self):
        self.log("[+] Checking for 2FA bypass vulnerability...")

        # First step: Try to log in normally (assuming that 2FA is required at this stage)
        response = self.session.post(self.login_url, data={"username": self.username, "password": self.password})
        
        if response.status_code == 200:
            # Simulate bypassing the 2FA process (insecure implementation may not require 2FA verification)
            self.log("[+] 2FA screen bypassed or skipped!")
            
            # Alternatively, some websites have weak 2FA implementations where the user is logged in without 2FA
            # Or you might test bypassing by submitting a second request without the 2FA code, which should trigger bypass
            bypass_payload = {"username": self.username, "password": self.password, "2fa_code": ""}  # Empty 2FA code
            
            # Attempt to log in without providing a valid 2FA code
            response_bypass = self.session.post(self.login_url, data=bypass_payload)
            
            if response_bypass.status_code == 200:
                self.log("[-] 2FA bypass successful! Vulnerability detected.")
            else:
                self.log("[+] 2FA protection is working as expected.")
