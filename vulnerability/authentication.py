import requests
import tkinter as tk
from vulnerability.crawl import Crawl

class Authentication(Crawl):
    def __init__(self, login_url, username, password, output_text):
        # Initialize the parent Crawl class with the target URL
        super().__init__(login_url, [])
        self.username = username
        self.password = password
        self.output_text = output_text

    def run_program(self):
        if not self.target_link:
            self.log("[!] No links to test.")
            return

        # Try to login to the application using provided credentials
        login_data = {
            "username": self.username,
            "password": self.password,
            "Login": "submit"
        }

        try:
            self.log("[+] Testing Authentication mechanisms...")

            # Send the login request to the login URL
            response = self.session.post(self.target_link[0], data=login_data)
            
            # Check for successful login (adjust based on your website's response)
            if "incorrect" not in response.text.lower() and "invalid" not in response.text.lower():
                self.log("[+] Successful login detected with provided credentials.")
                self.check_brute_force_protection(response)
                self.check_2fa_mechanism(response)
            else:
                self.log("[+] Login failed with the provided credentials.")

        except Exception as e:
            self.log(f"[!] Error during authentication test: {e}")

    def check_brute_force_protection(self, response):
        """Detects brute-force protection mechanisms like CAPTCHA or account lockout."""
        self.log(f"[+] Testing brute-force protection mechanisms...")

        for i in range(5):  # Simulate multiple failed login attempts
            failed_response = self.session.post(self.target_link[0], data={"username": "wronguser", "password": "wrongpass"})
            if "blocked" in failed_response.text.lower() or "captcha" in failed_response.text.lower():
                self.log(f"[!] Brute-force protection detected (e.g., CAPTCHA, account lockout).")
                return

        self.log(f"[+] No brute-force protection detected.")

    def check_2fa_mechanism(self, response):
        """Detects if the site uses 2FA or verification code."""
        if "verification code" in response.text.lower() or "2fa" in response.text.lower():
            self.log(f"[!] 2FA Mechanism detected.")
        else:
            self.log(f"[+] No 2FA mechanism found.")

    def log(self, message):
        """Logs messages to the Tkinter Text widget."""
        self.output_text.insert(tk.END, message + "\n")
        self.output_text.see(tk.END)
